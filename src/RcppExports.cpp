// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cpp_array_factor
arma::cx_colvec cpp_array_factor(const arma::colvec& kn, const arma::mat& R);
RcppExport SEXP cda_cpp_array_factor(SEXP knSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::colvec& >::type kn(knSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    __result = Rcpp::wrap(cpp_array_factor(kn, R));
    return __result;
END_RCPP
}
// cpp_oa
arma::rowvec cpp_oa(const arma::mat& R, const arma::cx_mat& A, const arma::cx_cube& AlphaBlocks, const double kn, const double medium, const arma::mat& IncidenceNodes, const arma::colvec& IncidenceWeights, const arma::mat& ScatteringNodes, const arma::colvec& ScatteringWeights, const int inversion, const int maxiter, const double tol);
RcppExport SEXP cda_cpp_oa(SEXP RSEXP, SEXP ASEXP, SEXP AlphaBlocksSEXP, SEXP knSEXP, SEXP mediumSEXP, SEXP IncidenceNodesSEXP, SEXP IncidenceWeightsSEXP, SEXP ScatteringNodesSEXP, SEXP ScatteringWeightsSEXP, SEXP inversionSEXP, SEXP maxiterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::cx_cube& >::type AlphaBlocks(AlphaBlocksSEXP);
    Rcpp::traits::input_parameter< const double >::type kn(knSEXP);
    Rcpp::traits::input_parameter< const double >::type medium(mediumSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type IncidenceNodes(IncidenceNodesSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type IncidenceWeights(IncidenceWeightsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ScatteringNodes(ScatteringNodesSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type ScatteringWeights(ScatteringWeightsSEXP);
    Rcpp::traits::input_parameter< const int >::type inversion(inversionSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    __result = Rcpp::wrap(cpp_oa(R, A, AlphaBlocks, kn, medium, IncidenceNodes, IncidenceWeights, ScatteringNodes, ScatteringWeights, inversion, maxiter, tol));
    return __result;
END_RCPP
}
// cpp_oa_spectrum
arma::mat cpp_oa_spectrum(const arma::colvec kn, const double medium, const arma::mat& R, const arma::cx_mat& Alpha, const arma::mat& Angles, const arma::mat& IncidenceNodes, const arma::colvec& IncidenceWeights, const arma::mat& ScatteringNodes, const arma::colvec& ScatteringWeights, const int inversion, const int maxiter, const double tol, const bool progress);
RcppExport SEXP cda_cpp_oa_spectrum(SEXP knSEXP, SEXP mediumSEXP, SEXP RSEXP, SEXP AlphaSEXP, SEXP AnglesSEXP, SEXP IncidenceNodesSEXP, SEXP IncidenceWeightsSEXP, SEXP ScatteringNodesSEXP, SEXP ScatteringWeightsSEXP, SEXP inversionSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::colvec >::type kn(knSEXP);
    Rcpp::traits::input_parameter< const double >::type medium(mediumSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type Alpha(AlphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Angles(AnglesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type IncidenceNodes(IncidenceNodesSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type IncidenceWeights(IncidenceWeightsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ScatteringNodes(ScatteringNodesSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type ScatteringWeights(ScatteringWeightsSEXP);
    Rcpp::traits::input_parameter< const int >::type inversion(inversionSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type progress(progressSEXP);
    __result = Rcpp::wrap(cpp_oa_spectrum(kn, medium, R, Alpha, Angles, IncidenceNodes, IncidenceWeights, ScatteringNodes, ScatteringWeights, inversion, maxiter, tol, progress));
    return __result;
END_RCPP
}
// cpp_alpha_blocks
arma::cx_cube cpp_alpha_blocks(const arma::cx_colvec& Alpha, const arma::mat& Angles);
RcppExport SEXP cda_cpp_alpha_blocks(SEXP AlphaSEXP, SEXP AnglesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::cx_colvec& >::type Alpha(AlphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Angles(AnglesSEXP);
    __result = Rcpp::wrap(cpp_alpha_blocks(Alpha, Angles));
    return __result;
END_RCPP
}
// cpp_polarization
arma::cx_mat cpp_polarization(const arma::cx_mat& E, const arma::cx_cube& AlphaBlocks);
RcppExport SEXP cda_cpp_polarization(SEXP ESEXP, SEXP AlphaBlocksSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type E(ESEXP);
    Rcpp::traits::input_parameter< const arma::cx_cube& >::type AlphaBlocks(AlphaBlocksSEXP);
    __result = Rcpp::wrap(cpp_polarization(E, AlphaBlocks));
    return __result;
END_RCPP
}
// cpp_interaction_matrix
arma::cx_mat cpp_interaction_matrix(const arma::mat& R, const double kn, const arma::cx_cube& AlphaBlocks);
RcppExport SEXP cda_cpp_interaction_matrix(SEXP RSEXP, SEXP knSEXP, SEXP AlphaBlocksSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double >::type kn(knSEXP);
    Rcpp::traits::input_parameter< const arma::cx_cube& >::type AlphaBlocks(AlphaBlocksSEXP);
    __result = Rcpp::wrap(cpp_interaction_matrix(R, kn, AlphaBlocks));
    return __result;
END_RCPP
}
// cpp_propagator
arma::cx_mat cpp_propagator(const arma::mat& R, const double kn, const arma::cx_cube& AlphaBlocks);
RcppExport SEXP cda_cpp_propagator(SEXP RSEXP, SEXP knSEXP, SEXP AlphaBlocksSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double >::type kn(knSEXP);
    Rcpp::traits::input_parameter< const arma::cx_cube& >::type AlphaBlocks(AlphaBlocksSEXP);
    __result = Rcpp::wrap(cpp_propagator(R, kn, AlphaBlocks));
    return __result;
END_RCPP
}
// cpp_alpha_blocks_update
void cpp_alpha_blocks_update(const arma::cx_colvec& Alpha, const arma::mat& Angles, arma::cx_cube& AlphaBlocks);
RcppExport SEXP cda_cpp_alpha_blocks_update(SEXP AlphaSEXP, SEXP AnglesSEXP, SEXP AlphaBlocksSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::cx_colvec& >::type Alpha(AlphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Angles(AnglesSEXP);
    Rcpp::traits::input_parameter< arma::cx_cube& >::type AlphaBlocks(AlphaBlocksSEXP);
    cpp_alpha_blocks_update(Alpha, Angles, AlphaBlocks);
    return R_NilValue;
END_RCPP
}
// cpp_polarization_update
void cpp_polarization_update(const arma::cx_mat& E, const arma::cx_cube& AlphaBlocks, arma::cx_mat& P);
RcppExport SEXP cda_cpp_polarization_update(SEXP ESEXP, SEXP AlphaBlocksSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type E(ESEXP);
    Rcpp::traits::input_parameter< const arma::cx_cube& >::type AlphaBlocks(AlphaBlocksSEXP);
    Rcpp::traits::input_parameter< arma::cx_mat& >::type P(PSEXP);
    cpp_polarization_update(E, AlphaBlocks, P);
    return R_NilValue;
END_RCPP
}
// cpp_interaction_matrix_update
void cpp_interaction_matrix_update(const arma::mat& R, const double kn, const arma::cx_cube& AlphaBlocks, arma::cx_mat& A);
RcppExport SEXP cda_cpp_interaction_matrix_update(SEXP RSEXP, SEXP knSEXP, SEXP AlphaBlocksSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double >::type kn(knSEXP);
    Rcpp::traits::input_parameter< const arma::cx_cube& >::type AlphaBlocks(AlphaBlocksSEXP);
    Rcpp::traits::input_parameter< arma::cx_mat& >::type A(ASEXP);
    cpp_interaction_matrix_update(R, kn, AlphaBlocks, A);
    return R_NilValue;
END_RCPP
}
// cpp_propagator_update
void cpp_propagator_update(const arma::mat& R, const double kn, const arma::cx_cube& AlphaBlocks, arma::cx_mat& G);
RcppExport SEXP cda_cpp_propagator_update(SEXP RSEXP, SEXP knSEXP, SEXP AlphaBlocksSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double >::type kn(knSEXP);
    Rcpp::traits::input_parameter< const arma::cx_cube& >::type AlphaBlocks(AlphaBlocksSEXP);
    Rcpp::traits::input_parameter< arma::cx_mat& >::type G(GSEXP);
    cpp_propagator_update(R, kn, AlphaBlocks, G);
    return R_NilValue;
END_RCPP
}
// cpp_cg_solve
arma::cx_mat cpp_cg_solve(const arma::cx_mat& A, const arma::cx_mat& y, arma::cx_mat& x0, const double nmax, const double tol);
RcppExport SEXP cda_cpp_cg_solve(SEXP ASEXP, SEXP ySEXP, SEXP x0SEXP, SEXP nmaxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::cx_mat& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const double >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    __result = Rcpp::wrap(cpp_cg_solve(A, y, x0, nmax, tol));
    return __result;
END_RCPP
}
// cpp_extinction
arma::colvec cpp_extinction(const double kn, const arma::cx_mat& P, const arma::cx_mat& Ein);
RcppExport SEXP cda_cpp_extinction(SEXP knSEXP, SEXP PSEXP, SEXP EinSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double >::type kn(knSEXP);
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type Ein(EinSEXP);
    __result = Rcpp::wrap(cpp_extinction(kn, P, Ein));
    return __result;
END_RCPP
}
// cpp_absorption
arma::colvec cpp_absorption(const double kn, const arma::cx_mat& P, const arma::cx_mat& E);
RcppExport SEXP cda_cpp_absorption(SEXP knSEXP, SEXP PSEXP, SEXP ESEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double >::type kn(knSEXP);
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type E(ESEXP);
    __result = Rcpp::wrap(cpp_absorption(kn, P, E));
    return __result;
END_RCPP
}
// cpp_scattering
arma::colvec cpp_scattering(const arma::mat& R, const arma::mat& angles, const arma::colvec& weights, const double kn, const arma::cx_mat& P);
RcppExport SEXP cda_cpp_scattering(SEXP RSEXP, SEXP anglesSEXP, SEXP weightsSEXP, SEXP knSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type angles(anglesSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const double >::type kn(knSEXP);
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type P(PSEXP);
    __result = Rcpp::wrap(cpp_scattering(R, angles, weights, kn, P));
    return __result;
END_RCPP
}
// cpp_dispersion
arma::mat cpp_dispersion(const arma::mat& R, const arma::cx_mat& A, const arma::cx_cube& AlphaBlocks, const double kn, const double medium, const arma::vec& Incidence, const arma::ivec& Axes, const arma::mat& ScatteringNodes, const arma::colvec& ScatteringWeights, const int polarisation, const int inversion, const int maxiter, const double tol);
RcppExport SEXP cda_cpp_dispersion(SEXP RSEXP, SEXP ASEXP, SEXP AlphaBlocksSEXP, SEXP knSEXP, SEXP mediumSEXP, SEXP IncidenceSEXP, SEXP AxesSEXP, SEXP ScatteringNodesSEXP, SEXP ScatteringWeightsSEXP, SEXP polarisationSEXP, SEXP inversionSEXP, SEXP maxiterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::cx_cube& >::type AlphaBlocks(AlphaBlocksSEXP);
    Rcpp::traits::input_parameter< const double >::type kn(knSEXP);
    Rcpp::traits::input_parameter< const double >::type medium(mediumSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Incidence(IncidenceSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type Axes(AxesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ScatteringNodes(ScatteringNodesSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type ScatteringWeights(ScatteringWeightsSEXP);
    Rcpp::traits::input_parameter< const int >::type polarisation(polarisationSEXP);
    Rcpp::traits::input_parameter< const int >::type inversion(inversionSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    __result = Rcpp::wrap(cpp_dispersion(R, A, AlphaBlocks, kn, medium, Incidence, Axes, ScatteringNodes, ScatteringWeights, polarisation, inversion, maxiter, tol));
    return __result;
END_RCPP
}
// cpp_dispersion_spectrum
arma::cube cpp_dispersion_spectrum(const arma::colvec kn, const double medium, const arma::mat& R, const arma::cx_mat& Alpha, const arma::mat& Angles, const arma::vec& Incidence, const arma::ivec& Axes, const arma::mat& ScatteringNodes, const arma::vec& ScatteringWeights, const int polarisation, const int inversion, const int maxiter, const double tol, const bool progress);
RcppExport SEXP cda_cpp_dispersion_spectrum(SEXP knSEXP, SEXP mediumSEXP, SEXP RSEXP, SEXP AlphaSEXP, SEXP AnglesSEXP, SEXP IncidenceSEXP, SEXP AxesSEXP, SEXP ScatteringNodesSEXP, SEXP ScatteringWeightsSEXP, SEXP polarisationSEXP, SEXP inversionSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::colvec >::type kn(knSEXP);
    Rcpp::traits::input_parameter< const double >::type medium(mediumSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type Alpha(AlphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Angles(AnglesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Incidence(IncidenceSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type Axes(AxesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ScatteringNodes(ScatteringNodesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ScatteringWeights(ScatteringWeightsSEXP);
    Rcpp::traits::input_parameter< const int >::type polarisation(polarisationSEXP);
    Rcpp::traits::input_parameter< const int >::type inversion(inversionSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type progress(progressSEXP);
    __result = Rcpp::wrap(cpp_dispersion_spectrum(kn, medium, R, Alpha, Angles, Incidence, Axes, ScatteringNodes, ScatteringWeights, polarisation, inversion, maxiter, tol, progress));
    return __result;
END_RCPP
}
// cpp_incident_field
arma::cx_mat cpp_incident_field(const arma::cx_colvec& Evec, const arma::colvec& kvec, const arma::mat& R, const arma::mat& Incidence);
RcppExport SEXP cda_cpp_incident_field(SEXP EvecSEXP, SEXP kvecSEXP, SEXP RSEXP, SEXP IncidenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::cx_colvec& >::type Evec(EvecSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type kvec(kvecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Incidence(IncidenceSEXP);
    __result = Rcpp::wrap(cpp_incident_field(Evec, kvec, R, Incidence));
    return __result;
END_RCPP
}
// cpp_incident_field_axis
arma::cx_mat cpp_incident_field_axis(const arma::cx_colvec& Evec, const arma::colvec& kvec, const arma::mat& R, const arma::colvec& Incidence, const arma::ivec& Axes);
RcppExport SEXP cda_cpp_incident_field_axis(SEXP EvecSEXP, SEXP kvecSEXP, SEXP RSEXP, SEXP IncidenceSEXP, SEXP AxesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::cx_colvec& >::type Evec(EvecSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type kvec(kvecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type Incidence(IncidenceSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type Axes(AxesSEXP);
    __result = Rcpp::wrap(cpp_incident_field_axis(Evec, kvec, R, Incidence, Axes));
    return __result;
END_RCPP
}
// sample_random
arma::mat sample_random(const int N);
RcppExport SEXP cda_sample_random(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    __result = Rcpp::wrap(sample_random(N));
    return __result;
END_RCPP
}
// sample_hc
arma::mat sample_hc(const int N, const double exclusion, const int maxiter, const int k);
RcppExport SEXP cda_sample_hc(SEXP NSEXP, SEXP exclusionSEXP, SEXP maxiterSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type exclusion(exclusionSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    __result = Rcpp::wrap(sample_hc(N, exclusion, maxiter, k));
    return __result;
END_RCPP
}
// cpp_euler_active
arma::mat cpp_euler_active(const double phi, const double theta, const double psi);
RcppExport SEXP cda_cpp_euler_active(SEXP phiSEXP, SEXP thetaSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type psi(psiSEXP);
    __result = Rcpp::wrap(cpp_euler_active(phi, theta, psi));
    return __result;
END_RCPP
}
// cpp_euler_passive
arma::mat cpp_euler_passive(const double phi, const double theta, const double psi);
RcppExport SEXP cda_cpp_euler_passive(SEXP phiSEXP, SEXP thetaSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type psi(psiSEXP);
    __result = Rcpp::wrap(cpp_euler_passive(phi, theta, psi));
    return __result;
END_RCPP
}
// cpp_axis_rotation
arma::mat cpp_axis_rotation(const double angle, const int axis);
RcppExport SEXP cda_cpp_axis_rotation(SEXP angleSEXP, SEXP axisSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double >::type angle(angleSEXP);
    Rcpp::traits::input_parameter< const int >::type axis(axisSEXP);
    __result = Rcpp::wrap(cpp_axis_rotation(angle, axis));
    return __result;
END_RCPP
}
